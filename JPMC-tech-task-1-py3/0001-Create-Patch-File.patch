From 5a1268e14d7a972b846a89ca7399ea6232bd9679 Mon Sep 17 00:00:00 2001
From: gurjas1999 <pepgurjas@gmail.com>
Date: Sun, 23 Aug 2020 09:28:35 +0530
Subject: [PATCH] Create Patch File

---
 0001-Create-Patch-File.patch | 120 +++++++++++++++++++++++++++++++++++
 client_test.py               |  52 ++++++++-------
 2 files changed, 149 insertions(+), 23 deletions(-)
 create mode 100644 0001-Create-Patch-File.patch

diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
new file mode 100644
index 0000000..42e3bf3
--- /dev/null
+++ b/0001-Create-Patch-File.patch
@@ -0,0 +1,120 @@
+From a771fe2b67c2703bb70b37b236c5de3dd5f6b9b9 Mon Sep 17 00:00:00 2001
+From: gurjas1999 <pepgurjas@gmail.com>
+Date: Sun, 23 Aug 2020 08:47:00 +0530
+Subject: [PATCH] Create Patch File
+
+---
+ client3.py     | 10 +++++++---
+ client_test.py | 45 +++++++++++++++++++++++++++++++++++++++++++++
+ 2 files changed, 52 insertions(+), 3 deletions(-)
+
+diff --git a/client3.py b/client3.py
+index f1771c3..9354fd4 100644
+--- a/client3.py
++++ b/client3.py
+@@ -35,14 +35,16 @@ def getDataPoint(quote):
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+-	price = bid_price
++	price = (bid_price+ask_price)/2
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+ 	""" Get ratio of price_a and price_b """
+ 	""" ------------- Update this function ------------- """
+ 	""" Also create some unit tests for this function in client_test.py """
+-	return 1
++	if price_b==0:
++		return
++	return price_a/price_b
+ 
+ # Main
+ if __name__ == "__main__":
+@@ -52,8 +54,10 @@ if __name__ == "__main__":
+ 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+ 
+ 		""" ----------- Update to get the ratio --------------- """
++		pricedict = {}
+ 		for quote in quotes:
+ 			stock, bid_price, ask_price, price = getDataPoint(quote)
++			pricedict[stock]=price
+ 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+ 
+-		print ("Ratio %s" % getRatio(price, price))
++		print(("Ratio %s" % getRatio(pricedict['ABC'], pricedict['DEF'])))
+diff --git a/client_test.py b/client_test.py
+index af2bf26..841c41e 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -1,5 +1,6 @@
+ import unittest
+ from client3 import getDataPoint
++from client3 import getRatio
+ 
+ class ClientTest(unittest.TestCase):
+   def test_getDataPoint_calculatePrice(self):
+@@ -8,6 +9,9 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for i in quotes:
++      self.assertEqual(getDataPoint(i),(i['stock'],i['top_bid']['price'],(i['top_bid']['price']+i['top_ask']['price'])/2))
++
+ 
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+@@ -15,9 +19,50 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for i in quotes:
++      self.assertEqual(getDataPoint(i),(i['stock'],i['top_bid']['price'],(i['top_bid']['price']+i['top_ask']['price'])/2))
+ 
+ 
+   """ ------------ Add more unit tests ------------ """
++  def test_getRatio_general(self):
++    quotes=[
++      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++
++    pricedict = {}
++    for quote in quotes:
++      stock, bid_price, ask_price, price = getDataPoint(quote)
++      pricedict[stock] = price
++    self.assertEqual(getRatio(pricedict['ABC'], pricedict['DEF']),((quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2)/((quotes[1]['top_ask']['price']+quotes[1]['top_bid']['price'])/2))
++
++  def test_getRatio_zero_priceB(self):
++    quotes = [
++      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++      {'top_ask': {'price': 0, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 0, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++    ]
++
++    pricedict = {}
++    for quote in quotes:
++      stock, bid_price, ask_price, price = getDataPoint(quote)
++      pricedict[stock] = price
++    self.assertEqual(getRatio(pricedict['ABC'], pricedict['DEF']),(None))
++
++
++
++
++
++
++
++
++
++
++
++
++
++
++
++
+ 
+ 
+ 
+-- 
+2.28.0.windows.1
+
diff --git a/client_test.py b/client_test.py
index 841c41e..3a9996d 100644
--- a/client_test.py
+++ b/client_test.py
@@ -24,29 +24,35 @@ class ClientTest(unittest.TestCase):
 
 
   """ ------------ Add more unit tests ------------ """
-  def test_getRatio_general(self):
-    quotes=[
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-
-    pricedict = {}
-    for quote in quotes:
-      stock, bid_price, ask_price, price = getDataPoint(quote)
-      pricedict[stock] = price
-    self.assertEqual(getRatio(pricedict['ABC'], pricedict['DEF']),((quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/2)/((quotes[1]['top_ask']['price']+quotes[1]['top_bid']['price'])/2))
-
-  def test_getRatio_zero_priceB(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 0, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453','top_bid': {'price': 0, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-
-    pricedict = {}
-    for quote in quotes:
-      stock, bid_price, ask_price, price = getDataPoint(quote)
-      pricedict[stock] = price
-    self.assertEqual(getRatio(pricedict['ABC'], pricedict['DEF']),(None))
+  def get_ratio_general(self):
+    priceA=123.56
+    priceB=323.45
+    self.asserEqual(getRatio(priceA,priceB),(priceA/priceB))
+
+  def get_ratio_zero_price_B(self):
+    priceA=123.56
+    priceB=0
+    self.assertEqual(getRatio(priceA,priceB),None)
+
+  def get_ratio_zero_price_A(self):
+    priceA=0
+    priceB=123.56
+    self.assertEqual(getRatio(priceA,priceB),0)
+
+  def get_ratio_below_1(self):
+    priceA=23
+    priceB=46
+    self.assertLess(getRatio(priceA,priceB),1)
+
+  def get_ratio_above_1(self):
+    priceA=46
+    priceB=23
+    self.assertGreater(getRatio(priceA,priceB),1)
+
+  def get_ratio_1(self):
+    priceA=12
+    priceB=12
+    self.assertEqual(getRatio(priceA,priceB),1)
 
 
 
-- 
2.28.0.windows.1

